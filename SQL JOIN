-- JOINS in SQL : use to combine different results from different queries on different tables
-- so long as these shared related column

-- 1) General JOIN ( Inner JOIN )
-- Find all the branches name and the name of their managers
INSERT INTO branch VALUES(4, 'Buffalo', NULL, NULL);

SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
JOIN branch
ON employee.emp_id = branch.mgr_id; 
-- query seeks 3 columns employee id, employee first name from employee tables
-- and branch name from branch table. JOIN branch = Join Employee table and Branch table with same column 
-- (the foreign key of branch table is referred to emp_id on employee table)
-- ON (this is condition for the JOIN) the emp_id that matches the mgr_id , will appear in the result table

SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
RIGHT JOIN branch
ON employee.emp_id = branch.mgr_id; -- this is the condition for the join
-- employee table is considered a left table and the branch is considered right table

-- LEFT JOIN will return ALL rows of the left table (first_name, last_name) of the employee table
-- Those emp_id that do not match any mgr_id on the right table, will return NULL 

-- RIGHT JOIN will return all the rows of the right table (branch_name)
-- Those branch_id that do not match any emp_id on the left table, will return NULL 

-- FULL OUTER JOIN ( not applicable in mySQL), will return all the rows of the left 
-- AND the right tables, no matter whether the condition emp_id = mgr_id is met or not

--#Concept : You can join table with itself!!!
-- Imagine situation where you need to call for 2 columns from 1 single table, and further filter them on condition such as Variable on 1st column = Variable on 2nd column
-- Example: Select a member name from club member (cd.members) database which have introduced another members into the club.
SELECT DISTINCT recs.firstname  , recs.surname ( # "recs" table surname and last name )
FROM cd.members mems # Note: here cd.members mems = giving an alias "mems" to table cd.members
JOIN cd.members recs # Note: here cd.members rec = giving an alias "recs" to the SAME table cd.members, but SQL would treat them as 2 separate LEFT and RIGHT table
ON recs.memid = mems.recommendedby (# condition of the join, where "mems" table 's memid = "recs" table 's recommendedby id, even though both ids are on the same table)


